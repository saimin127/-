這種建構方式可以保證所有物件都有name這個屬性，也避免出現bug。

//構造函數 fuction
function creatCard(initName) {
    this.name = initName;
}
//New 建立或構造
const a1 = new creatCard("aa");
const a2 = new creatCard("ab");
const a3 = new creatCard("ac");
const a4 = new creatCard("ad");
const a5 = new creatCard("ae");
console.log(a1);
console.log(a2);
console.log(a3);
console.log(a4);
console.log(a5);


//class為一種語法糖，為fuction外的另一種建立物件的方法
//constructor搭配著class使用，一個class不能有兩個constructor
// class Card {
     constructor(initName) {
         this.name = initName;
     }
 }
 const c1 = new Card("buluese");
 console.log
 
 //class還能繼承能力
class Car {
  constructor(initName) {
    this.name = initName;
  }
  start() {
    console.log("車子啟動");
  }
}

class Porshe extends Car {
  constructor(namePorshe) {
      //super是調用父層的內容使用
    super(namePorshe);
  }
  start2() {
    super.start();
    console.log("設好路線");
  }
// 可以將上面繼承的star在這裡覆寫掉
  start() {
    super.start();
    console.log("My Porshe啟動");
  }
}



const p1 = new Porshe("我的保時捷");
p1.start()
